/**
* Everything here is slightly hacky, because LESS does not provide
* built-in support for hash-tables.
* The data is structured like:
* {
*  "transition-metals": rgb(162,104,60),
*  "alkali-metals": rgb(87, 204, 96),
*  ...
* }
* We use a relational schema, mapping the
* @element-names list to the @element-colours list
* via index.
*/

/* Define colour values of element types */

@transition-metals:     rgb(162, 104, 60);
@alkali-metals:         rgb(87, 204, 96);
@alkaline-earth-metals: rgb(204, 183, 87);
@lanthanides:           rgb(84, 145, 32);
@actinides:             rgb(87, 120, 48);
@poor-metals:           rgb(255, 101, 44);
@metalloids:            rgb(255, 68, 46);
@polyatomic-nonmetals:  rgb(204, 69, 66);
@diatomic-nonmetals:    rgb(112, 95, 255);
@noble-gases:           rgb(29, 174, 187);
@unknown:               rgb(187, 84, 38);

/* Define element names */

@element-names: 
  transition-metals,
  alkali-metals,
  alkaline-earth-metals,
  lanthanides,
  actinides,
  poor-metals,
  metalloids,
  polyatomic-nonmetals,
  diatomic-nonmetals,
  noble-gases,
  unknown;

/* Define colours of all elements */

@element-colours:
  @transition-metals,
  @alkali-metals,
  @alkaline-earth-metals,
  @lanthanides,
  @actinides,
  @poor-metals,
  @metalloids,
  @polyatomic-nonmetals,
  @diatomic-nonmetals,
  @noble-gases,
  @unknown;

/**
* Call for generating one rule for one colour of one colour group
* E.g.
* .generate-class(2, actinides, rgb(87, 120, 48), 8%)
* -> .element-2.actinides {
*   background-color: rgb(87, 120, 48)-20%;
* }
*/

.generate-class(@index, @name, @colour, @darken) when (isnumber(@index)) and (iscolor(@colour)) {
  &.element-@{index}.@{name} {
    background-color: darken(@colour, @darken);
  }
}

/* Generate all colours of one group, with one darkness factor. */

.generate-colours(@index, @darken) {
  .loop(@i) when (@i > 0) {
    @name: extract(@element-names, @i);
    @colour: extract(@element-colours, @i);
    .generate-class(@index, @name, @colour, @darken);
    .loop(@i - 1);
  }
  .loop(0) {};
  .loop(length(@element-colours));
}